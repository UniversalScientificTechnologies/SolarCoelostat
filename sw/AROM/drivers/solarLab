#!/usr/bin/env python
# -*- coding: utf-8 -*-


#
#  Tento kod slouzi k ovladanic hardwaru slunecniho coelostatu slunecni laboratore na observatori v Ondrejove
# 
#


import __init__
import math
import time
import rospy
import rosnode
import std_msgs
import sensor_msgs
import geometry_msgs
from geometry_msgs.msg import Point
import arom
import axis
import json
import os
import zmq
#from __init__ import AromNode
from arom_tools import AromNode

btn_data = []

def callback_btn(recive):
    print recive
    global btn_data
    btn_data.append(recive.data)
    #print recive, btn_data


class SolarLab(AromNode):
    node_name = "sun_controller"
    node_type = "asu_solar"
    node_pymlab = False
    flag = {'tracking': False, 'assisted': False}

    mot_a_min =  4000.0
    mot_a_max = 27000.0
    mot_b_min =  2000.0
    mot_b_max = 10000.0

    def __init__(self):

        self.bump = False  # toto se zaktivuje, kdyz motory dojedou na doraz.
        self.calibration = False
        self.calib_status = 0
        self.speedA = 0
        self.speedB = 0
        self.speedC = 0
        self.motor_a_status = ""
        self.motor_b_status = ""
        self.motor_c_status = ""
        self.time_axis_addition = 0 # zmena rychlosti hodinove osy

        spdAold, spdBold = 0, 0
        rospy.set_param("/coelostat/speeds/tracking", 32.86)
        self.trackingSpdDefault = rospy.get_param("/coelostat/speeds/tracking")
        self.trackingSpd = self.trackingSpdDefault
        self.sunpos = None
        self.btn_data = []

        rospy.Subscriber("/arom/UI/buttons", std_msgs.msg.String, self.callback_btn)
        rospy.Subscriber("/sun_pos", Point, self.callback_sunpos)
        rospy.Subscriber("/sun_err", Point, self.callback_sunerr)

        self.pub_imagetarget = rospy.Publisher("/image_target", Point, queue_size=1)
        self.pub_imagecommand= rospy.Publisher("/image_command", std_msgs.msg.String, queue_size=5)
        self.pub_beep = rospy.Publisher('/beeper/preset', std_msgs.msg.String, queue_size=5)
        self.pub_lcd  = rospy.Publisher('/arom/node/lcd_client/rows', std_msgs.msg.String, queue_size=2, latch = True)


        self.pub_motor_a = rospy.Publisher("/coleostat/motor_a", std_msgs.msg.String, queue_size=1)
        self.pub_motor_b = rospy.Publisher("/coleostat/motor_b", std_msgs.msg.String, queue_size=1)
        self.pub_motor_c = rospy.Publisher("/coleostat/motor_c", std_msgs.msg.String, queue_size=1)

        #rospy.Subscriber("sun_pos", geometry_msgs.msg.Point, self.callback_sunpos)

        # connection = pika.SelectConnection(on_open_callback=on_open)
        #
        # connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
        # channel = connection.channel()
        #
        #
        # channel.queue_declare(queue='tracking')
        # channel.basic_consume(self.rabbit_tracking,
        #               queue='tracking',
        #               no_ack=False)
        # channel.start_consuming()
        port = "5556"
        context = zmq.Context()
        socket = context.socket(zmq.PAIR)
        socket.bind("tcp://*:%s" % port)


        AromNode.__init__(self)
        for attempt in range(5):
            try:
                self.pymlab = rospy.ServiceProxy('pymlab_drive', arom.srv.PymlabDrive)
                rospy.set_param('/arom/node'+rospy.get_name()+"/pymlab", True)
            except:
                print "ERR pripojovani k /pymlab_drive"
                time.sleep(5)
            else:
              break

        #self.pymlab = rospy.ServiceProxy('pymlab_drive', arom.srv.PymlabDrive)
        #rospy.set_param('/arom/node'+rospy.get_name()+"/pymlab", True)
        #self.set_feature('gpio_set_port',{'ports': 8, 'devices': str(self.devices0) ,'subscrib': '/gpio/gpio_mount'})
        #self.set_feature('gpio_all_off',{'subscrib': '/gpio/gpio_mount', 'msg': 'off'})

        self.set_feature('hbstep_status',  {'id': 'motor_a', 'name': 'Motor A AZ', 'toppic': '/coleostat/motor_a'})
        self.set_feature('hbstep_status__0', {'id': 'motor_b', 'name': 'Motor B ALT', 'toppic': '/coleostat/motor_b'})
        self.set_feature('hbstep_status__1',{'id': 'motor_c', 'name': 'Motor C Time', 'toppic': '/coleostat/motor_c'})
        self.set_feature('hsfa_speed',{'param': '/coelostat/speeds/tracking'})

        #self.pymlab(device="gpio_mount", method="config_ports", parameters=str(dict(port0 = self.config0, port1 = self.config1)))

        #status_timer = rospy.Timer(rospy.Duration(1), , oneshot=False)

        self.motor_a = axis.axis(SPI = self.pymlab, SPI_CS = 0b0001, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mirrorRADEC')
        self.motor_b = axis.axis(SPI = self.pymlab, SPI_CS = 0b0010, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mirrorRADEC')
        self.motor_c = axis.axis(SPI = self.pymlab, SPI_CS = 0b0100, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mirrorTIME')

        #self.motor_a.Reset(KVAL_RUN = 0x29, KVAL_ACC = 0x49, KVAL_DEC = 0x49, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #leva prava
        #self.motor_b.Reset(KVAL_RUN = 0x19, KVAL_ACC = 0x49, KVAL_DEC = 0x49, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #nahoru dolu
        #self.motor_c.Reset(KVAL_RUN = 0x29, KVAL_ACC = 0x39, KVAL_DEC = 0x39, FS_SPD = 0xFFFF, STEP_SEL = 0b011) #time motor

        #self.motor_a.Reset(KVAL_RUN = 0x26, KVAL_ACC = 0x45, KVAL_DEC = 0x45, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #leva prava
        self.motor_a.Reset(KVAL_RUN = 0x23, KVAL_ACC = 0x30, KVAL_DEC = 0x30, FS_SPD = 0xFFFF, STEP_SEL = 0b000, ACC=0x00a) #leva prava
        #self.motor_b.Reset(KVAL_RUN = 0x20, KVAL_ACC = 0x39, KVAL_DEC = 0x39, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #nahoru dolu
        #self.motor_a.Reset(KVAL_RUN = 0x0, KVAL_ACC = 0x40, KVAL_DEC = 0x40, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #leva prava
        self.motor_b.Reset(KVAL_RUN = 0x23, KVAL_ACC = 0x30, KVAL_DEC = 0x30, FS_SPD = 0xFFFF, STEP_SEL = 0b001, ACC=0x00a) #nahoru dolu
        self.motor_c.Reset(KVAL_RUN = 0x29, KVAL_ACC = 0x39, KVAL_DEC = 0x39, FS_SPD = 0xFFFF, STEP_SEL = 0b011) #time motor

        #nahoru dolu

        '''
        pocet kroku je cca 16600 s nastavenim STEP_SEL = 0b001
        '''

        #self.motor_c.setConfig(EXT_CLK = 0b1, OSC_SEL = 0b110) # Ext clock source: 24 MHz(Crystal/resonator driver disabled)

        self.motor_a.Float()
        self.motor_b.Float()
        self.motor_c.Float()
        self.direction = 1

        self.motor_a.MaxSpeed(150)
        #self.motor_a.MaxSpeed(150)
        #self.motor_a.MinSpeed(20)

        self.motor_b.MaxSpeed(190)  #leva prava
        #self.motor_b.MaxSpeed(190)  #leva prava
        #self.motor_b.MinSpeed(20)

        self.motor_c.MaxSpeed(0x33ff)

        self.motor_a_status = self.motor_a.GetStatus()
        self.motor_a_pos = self.motor_a.getPosition()
        self.motor_b_status = self.motor_b.GetStatus()
        self.motor_b_pos = self.motor_b.getPosition()
        self.motor_c_status = self.motor_c.GetStatus()


        last_data = [None]

        rate = rospy.Rate(10)
        self.pub_beep.publish('welcome')
        self.pub_lcd.publish("Welcome...    OK\nAROM    MLAB.cz")

        while not rospy.is_shutdown():
            try:
                self.get_status()

                try:
                    msg = socket.recv(flags=zmq.NOBLOCK)
                    print("OBTAINED MSG")
                    print(msg)
                except Exception as e:
                    msg = None

                if msg:
                    if 'timer;' in msg:
                        if msg.split(';')[1] == '0':
                            print("STOP timer")
                            self.flag['tracking']= False
                            self.motor_c.Float()

                        elif msg.split(';')[1] == '1':
                            print("START tracking")
                            self.flag['tracking']= True
                            self.motor_c.Run(0, self.trackingSpd*self.direction)

                        elif msg.split(';')[1] == '2':
                            print("START only time motor")
                            self.flag['tracking']= True
                            self.speedA, self.speedB = 0, 0
                            self.motor_c.Run(0, self.trackingSpd*self.direction)
                            self.motor_a.Float()
                            self.motor_b.Float()

                        else:
                            try:
                                val = float(msg.split(';')[1])
                                if val < 0.5: val = 0.5
                                if val > 1.9: val = 1.9
                                self.flag['tracking']= True
                                self.motor_c.Run(0, self.trackingSpd*self.direction*val)
                            except Exception as e:
                                pass

                    elif 'moveA;' in msg:
                        if msg.split(';')[1] == '0':
                            print("STOP")
                            self.flag['tracking']= True
                            self.motor_a.Float()

                        elif msg.split(';')[1] == '1':
                            print("START")
                            self.speedA = 20
                            self.motor_a.Run(0, self.speedA)

                        elif msg.split(';')[1] == '-1':
                            print("START")
                            self.speedA = -20
                            self.motor_a.Run(0, self.speedA)

                    elif 'moveB;' in msg:
                        if msg.split(';')[1] == '0':
                            print("STOP")
                            self.flag['tracking']= True
                            self.motor_b.Float()

                        elif msg.split(';')[1] == '1':
                            print("START")
                            self.speedA = 20
                            self.motor_b.Run(0, self.speedA)

                        elif msg.split(';')[1] == '-1':
                            print("START")
                            self.speedA = -20
                            self.motor_b.Run(0, self.speedA)

                    elif 'chyba;' in msg and not self.bump:
                        err = msg.split(';')
                        if err[1] == '1':
                            if self.flag['assisted'] == False:
                                self.flag['assisted'] = True
                                self.pub_lcd.publish("Asistence zapnuta \n Asist: %s" %(repr(self.flag['assisted'])))

                            self.flag['assisted_last'] = time.time()
                            errx = float(err[2])
                            erry = float(err[3])
                            print("Chyba pozice na kamere - pohyb na {}px, {}px".format(errx, erry))

                            max_err = 7

                            if errx < max_err and errx > -max_err:
                                self.motor_b.Float()
                            elif errx > 50:
                                self.motor_a.Run(0, 30)
                            elif errx > 30:
                                self.motor_a.Run(0, 20)
                            elif errx > 0:
                                self.motor_a.Run(0, 5)
                            elif errx < 50:
                                self.motor_a.Run(1, 30)
                            elif errx < 30:
                                self.motor_a.Run(1, 20)
                            elif errx < 0:
                                self.motor_a.Run(1, 5)

                            if erry < max_err and erry > -max_err:
                                self.motor_b.Float()
                            elif erry > 50:
                                self.motor_b.Run(0, 20)
                            elif erry > 30:
                                self.motor_b.Run(0, 10)
                            elif erry > 0:
                                self.motor_b.Run(0, 5)
                            elif erry < 50:
                                self.motor_b.Run(1, 20)
                            elif erry < 30:
                                self.motor_b.Run(1, 10)
                            elif erry < 0:
                                self.motor_b.Run(1, 5)
                            print("Asist")

                        elif err[1] == '0':
                            if self.flag['assisted'] == True:
                                self.flag['assisted'] = False
                                self.pub_lcd.publish("Asistence pozdržena \n Asist: %s" %(repr(self.flag['assisted'])))
                                self.motor_b.Float()
                                self.motor_a.Float()
                                self.flag['tracking']= True
                                self.speedA, self.speedB = 0, 0
                                self.motor_c.Run(0, self.trackingSpd*self.direction)


                if len(self.btn_data) > 0:
                    lastBtn = self.btn_data[0]
                    last_data = lastBtn.split(" ")
                    self.btn_data.pop(0)

                    print "incomming:", last_data

                    if last_data[0] == 'KEY_LEFT':
                        self.speedA -= 20
                        self.motor_a.Run(0, self.speedA)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("Left \n %s" %(self.speedA))

                    elif last_data[0] == 'KEY_RIGHT':
                        self.speedA += 20
                        self.motor_a.Run(0, self.speedA)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("Right \n %s" %(self.speedA))

                    elif last_data[0] == 'KEY_DOWN':
                        self.speedB -= 10
                        self.motor_b.Run(0, self.speedB)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("DOWN \n %s" %(self.speedB))

                    elif last_data[0] == 'KEY_UP':
                        self.speedB += 10
                        self.motor_b.Run(0, self.speedB)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("UP \n %s" %(self.speedB))


                    elif last_data[0] == 'KEY_VOLUMEUP':
                        # self.flag['assisted'] = not self.flag['assisted']
                        # #self.flag['tracking']= False
                        # #self.pub_imagecommand.publish("pause")
                        # self.motor_a.Float()
                        # self.motor_b.Float()
                        # self.motor_c.Run(0, self.trackingSpd*self.direction)
                        # #time.sleep(0.25)

                        # if self.flag['assisted']:
                        #     self.pub_lcd.publish("Asist. navadeni \n     Zapnuto")
                        # else:
                        #     self.pub_lcd.publish("Asist. navadeni \n     Vypnuto")
                        self.time_axis_addition += 1
                        self.flag['tracking']= True
                        self.motor_c.Run(0, self.trackingSpd*self.direction+self.time_axis_addition)


                    elif last_data[0] == 'KEY_VOLUMEDOWN':
                        #self.pub_imagecommand.publish("hold")
                        self.time_axis_addition += -1
                        self.flag['tracking']= True
                        self.motor_c.Run(0, self.trackingSpd*self.direction+self.time_axis_addition)


                    elif last_data[0] == 'KEY_OK':
                        self.trackingSpd = float(rospy.get_param("/coelostat/speeds/tracking"))
                        self.flag['tracking']= True
                        print self.sunpos
                        #if self.sunpos:        #drzet tuto polohu slunce
                        #    self.pub_imagetarget.publish(self.sunpos)
                        self.speedA = 0
                        self.speedB = 0
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.motor_c.Run(0, self.trackingSpd*self.direction)
                        #self.pub_imagecommand.publish("start")
                        self.pub_lcd.publish("Start tracking \n Asist: %s" %(repr(self.flag['assisted'])))

                    elif last_data[0] == 'KEY_MUTE': # MUTE button - vse zastavi (vcetne hodinoveho stroje)
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.motor_c.Float()
                        self.speedA = 0
                        self.speedB = 0

                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("stop")
                        self.pub_lcd.publish("STOP")

                        #self.speedA = 0
                        #self.speedB = 0
                        #self.speedC = 0

                        #self.motor_a.Reset(KVAL_RUN = 0x75, KVAL_ACC = 0xFF, KVAL_DEC = 0xFF, FS_SPD = 0xFFFFFF, init=False)
                        #self.motor_b.Reset(KVAL_RUN = 0x75, KVAL_ACC = 0xFF, KVAL_DEC = 0xFF, FS_SPD = 0xFFFFFF, init=False)
                        #self.motor_c.Reset(KVAL_RUN = 0x75, KVAL_ACC = 0xFF, KVAL_DEC = 0xFF, FS_SPD = 0xFFFFFF, init=False)

                        #self.motor_c.setConfig(EXT_CLK = 0b1, OSC_SEL = 0b110) # Ext clock source: 24 MHz(Crystal/resonator driver disabled)


                    elif last_data[0] == 'KEY_HOME': # HOME button - navrati coelostat do polohy, kde bude 'prenocovavat'
                        #self.pub_imagecommand.publish("recenter")
                        #self.pub_imagecommand.publish("calibrate")
                        self.pub_lcd.publish("Vycentrovani\n      centrovani")
                        self.motor_b.GoTo(6000, wait=False)
                        time.sleep(1)
                        self.motor_a.GoTo(16000, wait=False)

                        while self.motor_a.IsBusy() or self.motor_b.IsBusy():
                            time.sleep(0.3)

                        self.pub_lcd.publish("Vycentrovani\n       Dokonceno")


                    elif last_data[0] == 'KEY_BACK': # BACK - vyresetuje nastavení, vycentruje obraz na střed

                        self.calibration = True  # tohle je, ze kalibrace probiha
                        self.trackingSpd = self.trackingSpdDefault*self.direction
                        self.bump = False
                        self.motor_a.Reset()
                        self.motor_b.Reset()
                        self.motor_c.Reset()
                        time.sleep(0.5)

                        self.motor_a.wait()
                        self.motor_b.wait()

                        self.motor_a.MaxSpeed(100)
                        self.motor_b.MaxSpeed(100)
                        self.motor_a.ResetPos()
                        self.motor_b.ResetPos()

                        print "zacatek kalibrace 1 - bezpečnostní odjetí"
                        self.pub_lcd.publish("Kalibrace polohy\n  1 z 4")

                        if self.motor_a.GetStatus().get("SW_F", True) or self.motor_b.GetStatus().get("SW_F", True):
                            print("Kalibrace selhala - motor na koncaku")
                            self.pub_lcd.publish("Kalibrace-Error\nMotor na koncaku")
                            self.calibration = False
                            self.motor_c.Float()
                            self.motor_a.Float()
                            self.motor_b.Float()
                            continue

                        self.motor_c.Run(0, self.trackingSpd*self.direction)

                        self.pub_lcd.publish("Kalibrace polohy\n  2 z 5")
                        print(">> kalibrace 2")

                        for x in range(3):
                            self.motor_a.Move(220000)
                            time.sleep(1)
                            self.motor_b.Move(100000)
                            time.sleep(1)

                        print("Cekam - dolu")
                        while self.motor_a.IsBusy() or self.motor_b.IsBusy():
                            time.sleep(1)
                            a, b = self.motor_a.getPosition(), self.motor_b.getPosition()
                            print "dolu: ", a, b

                        print "kalibrace 3"
                        self.pub_lcd.publish("Kalibrace polohy\n   3 z 5")

                        #time.sleep(0.5)
                        print("Vyresetovani polohy nahore")
                        self.motor_a.Float()
                        self.motor_b.Float()
                        time.sleep(1)
                        self.motor_b.ResetPos()
                        self.motor_a.ResetPos()
                        time.sleep(1)


                        for x in range(5):
                            self.motor_a.Move(-250000)
                            time.sleep(1)
                            self.motor_b.Move(-100000)
                            time.sleep(1)
                        self.pub_lcd.publish("Kalibrace polohy\n   4 z 5")


                        print("Cekam - nahoru")
                        while self.motor_a.IsBusy() or self.motor_b.IsBusy():
                            time.sleep(1)
                            a, b = self.motor_a.getPosition(), self.motor_b.getPosition()
                            print "nahoru: ", a, b

                        self.mot_a_min = 0
                        self.mot_a_max = self.motor_a.getPosition()
                        self.mot_b_min = 0
                        self.mot_b_max = self.motor_b.getPosition()

                        print("Rozsahy:")
                        print(self.mot_a_min, self.mot_a_max)
                        print(self.mot_b_min, self.mot_b_max)

                        print "kalibrace 3"
                        self.pub_lcd.publish("Kalibrace polohy\n   5 z 5")

                        #self.motor_a.GoTo(16000)
                        print("Prejezd do stredu")

                        for x in xrange(5):
                            self.motor_a.GoTo(self.mot_a_max/2, wait = False)
                            time.sleep(1)
                            self.motor_b.GoTo(self.mot_b_max/2, wait = False)
                            time.sleep(1)


                        print("Cekam - stred")
                        while self.motor_a.IsBusy() or self.motor_b.IsBusy():
                            time.sleep(1)
                            a, b = self.motor_a.getPosition(), self.motor_b.getPosition()
                            print "stred: ", a, b
                            

                        print "kalibrace 4"
                        self.trackingSpd = int(rospy.get_param("/coelostat/speeds/tracking", 32.8))
                        self.motor_a.Float()
                        self.motor_b.Float()

                        self.pub_lcd.publish("Kalibrace polohy\nDokonceno")
                        self.calibration = False
                        self.calib_status = 1


                    elif last_data[0] == 'KEY_NEXT': # + - None
                        pass

                    elif last_data[0] == 'KEY_POWER':
                        try:
                            self.motor_a.Float()
                            self.motor_b.Float()
                            self.motor_c.Float()
                        except Exception as e:
                            print e

                        self.pub_imagecommand.publish("poweroff")
                        self.pub_lcd.publish("Vypinam se ... \n AROM    MLAB.cz")
                        time.sleep(1)
                        os.system("systemctl poweroff -f")
                        #os.system("shutdown now");

                        #pass


                else:
                    if last_data[0] == 'KEY_OK' and self.flag['tracking'] == True and self.flag['assisted'] == True and self.bump == False:
                        try:
                            print "tracking",

                            spdA = self.sunerr.x*0.5

                            if spdA > 100:
                                spdA = 100
                            elif spdA < -100:
                                spdA = -100

                            if spdB > 100:
                                spdB = 100
                            elif spdB < -100:
                                spdB = -100

                            print spdA, spdB

                            if abs(spdAold - spdA) > 5:
                                self.motor_a.Run(0, int(spdA))
                                spdAold = spdA
                            if abs(spdBold - spdB) > 5:
                                self.motor_b.Run(0, int(spdB))
                                spdBold = spdB
                        except Exception as e:
                            pass
                            #print 'err3>', e


                    #self.pymlab(device="gpio_mount", method="set_ports", parameters=str(dict(port0 = self.port0, port1= self.port1)))

            except Exception, e:
                print "err1>", e
            rate.sleep()

        status_timer.shutdown()
        self.motor_a.Float()
        self.motor_b.Float()
        self.motor_c.Float()

    def get_status(self, timer = None):
        try:

            #print "motor A: %i, motor B: %i " %(self.motor_a.getPosition(), self.motor_b.getPosition())

            if not self.calibration:

                self.motor_a_status = self.motor_a.GetStatus()
                self.motor_a_status2 = self.motor_a.GetStatus()
                self.motor_a_pos = self.motor_a.getPosition()
                self.motor_b_status = self.motor_b.GetStatus()
                self.motor_b_status2 = self.motor_b.GetStatus()
                self.motor_b_pos = self.motor_b.getPosition()
                self.motor_c_status = self.motor_c.GetStatus()

                #print(self.motor_a_pos, self.motor_b_pos)


                #print self.motor_a_status['SW_F'], self.motor_b_status['SW_F'], self.motor_c_status['SW_F']
                if ((self.motor_a_status['SW_F'] and self.motor_a_status2['SW_F'])  | (self.motor_b_status['SW_F'] and self.motor_b_status2['SW_F'])):
                    self.speedA = 0
                    self.speedB = 0

                    self.bump = True
                    print "Err - SWITCH"
                    self.pub_beep.publish('horn')
                    self.pub_lcd.publish("POZOR!   A B\n doraz   %s %s" %(int(self.motor_a_status['SW_F']), int(self.motor_b_status['SW_F'])))

                    self.motor_a.Float()
                    self.motor_b.Float()

                else:

                    self.bump = False

                    if self.mot_a_min > self.motor_a_pos and self.calib_status > 0:
                        self.bump = True
                        if self.speedA > 0:
                            self.motor_a.Float()
                            self.speedA = 0

                        self.pub_beep.publish('horn')
                        self.pub_lcd.publish("POZOR! limitSW\nAZ  jedte doleva")

                    elif self.mot_a_max < self.motor_a_pos and self.calib_status > 0:
                        self.bump = True
                        if self.speedA < 0:
                            self.motor_a.Float()
                            self.speedA = 0
                        self.pub_beep.publish('horn')
                        self.pub_lcd.publish("POZOR! limit SW\nAZ jedte doprava")


                    if self.mot_b_min > self.motor_b_pos and self.calib_status > 0:
                        self.bump = True
                        if self.speedB > 0:
                            self.motor_b.Float()
                            self.speedB = 0
                        self.pub_beep.publish('horn')
                        self.pub_lcd.publish("POZOR! limit SW\nALT jedte dolu")

                    elif self.mot_b_max < self.motor_b_pos and self.calib_status > 0:
                        self.bump = True
                        if self.speedB < 0:
                            self.motor_b.Float()
                            self.speedB = 0
                        self.pub_beep.publish('horn')
                        self.pub_lcd.publish("POZOR! limit SW\nALT  jedte nahoru")


                #print self.motor_a_status, self.motor_b_status, self.motor_c_status
                self.motor_a_status['position'] = self.motor_a_pos
                self.motor_a_status['position_p'] = (self.motor_a_pos-self.mot_a_min)/(self.mot_a_max-self.mot_a_min)*100.0
                self.motor_b_status['position'] = self.motor_b_pos
                self.motor_b_status['position_p'] = (self.motor_b_pos-self.mot_b_min)/(self.mot_b_max-self.mot_b_min)*100.0

                self.pub_motor_a.publish(json.dumps(self.motor_a_status, ensure_ascii=False))
                self.pub_motor_b.publish(json.dumps(self.motor_b_status, ensure_ascii=False))
                self.pub_motor_c.publish(json.dumps(self.motor_c_status, ensure_ascii=False))


        except Exception as e:
            print 'err2> ', e
            print self.motor_a_status
            print self.motor_b_status
            print self.motor_c_status
            self.pub_beep.publish('horn')
            #self.pymlab = rospy.ServiceProxy('pymlab_drive', arom.srv.PymlabDrive)


    def callback_btn(self, recive):
        print recive
        self.btn_data.append(recive.data)
        #print recive, btn_data

    def callback_sunerr(self, recive):
        #print recive
        self.sunerr = recive

        #self.btn_data.append(recive.data)
        #print recive, btn_data

    def callback_sunpos(self, recive):
        #print recive
        self.sunpos = recive


    def rabbit_tracking(self, ch, method, properties, body):
        print("A--------------")
        print(" [x] Received %r" % body)
        print(ch, method, properties)
        #self.trackingSpd = float(rospy.get_param("/coelostat/speeds/tracking"))
        #self.flag['tracking']= True


if __name__ == '__main__':
    while not rosnode.rosnode_ping("/pymlab", 1):
        time.sleep(1)
    print "pymlab nalezen"
    time.sleep(5)
    m = SolarLab()
