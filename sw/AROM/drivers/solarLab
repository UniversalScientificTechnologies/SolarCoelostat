#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
import time
import rospy
import rosnode
import std_msgs
import sensor_msgs
import geometry_msgs
from geometry_msgs.msg import Point
import arom
import axis
import json
import os
from __init__ import AromNode

btn_data = []

def callback_btn(recive):
    print recive
    global btn_data
    btn_data.append(recive.data)
    #print recive, btn_data


class SolarLab(AromNode):
    node_name = "sun_controller"
    node_type = "asu_solar"
    node_pymlab = False
    flag = {'tracking': False, 'assisted': False}

    def __init__(self):

        self.bump = False  # toto se zaktivuje, kdyz motory dojedou na doraz.
        self.calibration = False
        self.speedA = 0
        self.speedB = 0
        self.speedC = 0
        self.motor_a_status = ""
        self.motor_b_status = ""
        self.motor_c_status = ""
        spdAold, spdBold = 0, 0
        self.trackingSpdDefault = int(rospy.get_param("/coelostat/speeds/tracking", 200))
        self.trackingSpd = self.trackingSpdDefault
        self.sunpos = None
        self.btn_data = []

        rospy.Subscriber("/arom/UI/buttons", std_msgs.msg.String, self.callback_btn)
        rospy.Subscriber("/sun_pos", Point, self.callback_sunpos)
        rospy.Subscriber("/sun_err", Point, self.callback_sunerr)

        self.pub_imagetarget = rospy.Publisher("/image_target", Point, queue_size=1)
        self.pub_imagecommand= rospy.Publisher("/image_command", std_msgs.msg.String, queue_size=5)
        self.pub_beep = rospy.Publisher('/beeper/preset', std_msgs.msg.String, queue_size=5)
        self.pub_lcd  = rospy.Publisher('/arom/node/lcd_client/rows', std_msgs.msg.String, queue_size=2)


        self.pub_motor_a = rospy.Publisher("/coleostat/motor_a", std_msgs.msg.String, queue_size=1)
        self.pub_motor_b = rospy.Publisher("/coleostat/motor_b", std_msgs.msg.String, queue_size=1)
        self.pub_motor_c = rospy.Publisher("/coleostat/motor_c", std_msgs.msg.String, queue_size=1)

        #rospy.Subscriber("sun_pos", geometry_msgs.msg.Point, self.callback_sunpos)


        AromNode.__init__(self)
        for attempt in range(5):
            try:
                self.pymlab = rospy.ServiceProxy('pymlab_drive', arom.srv.PymlabDrive)
                rospy.set_param('/arom/node'+rospy.get_name()+"/pymlab", True)
            except:
                print "ERR pripojovani k /pymlab_drive"
                time.sleep(5)
            else:
              break
              
        #self.pymlab = rospy.ServiceProxy('pymlab_drive', arom.srv.PymlabDrive)
        #rospy.set_param('/arom/node'+rospy.get_name()+"/pymlab", True)
        #self.set_feature('gpio_set_port',{'ports': 8, 'devices': str(self.devices0) ,'subscrib': '/gpio/gpio_mount'})
        #self.set_feature('gpio_all_off',{'subscrib': '/gpio/gpio_mount', 'msg': 'off'})

        self.set_feature('hbstep_status',  {'id': 'motor_a', 'name': 'Motor RA', 'toppic': '/coleostat/motor_a'})
        self.set_feature('hbstep_status__0', {'id': 'motor_b', 'name': 'Motor DEC', 'toppic': '/coleostat/motor_b'})
        self.set_feature('hbstep_status__1',{'id': 'motor_c', 'name': 'Motor Time', 'toppic': '/coleostat/motor_c'})
        self.set_feature('hsfa_speed',{'param': '/coelostat/speeds/tracking'})

        #self.pymlab(device="gpio_mount", method="config_ports", parameters=str(dict(port0 = self.config0, port1 = self.config1)))
        
        rospy.Timer(rospy.Duration(1), self.get_status, oneshot=False)

        self.motor_a = axis.axis(SPI = self.pymlab, SPI_CS = 0b0001, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mirrorRADEC')
        self.motor_b = axis.axis(SPI = self.pymlab, SPI_CS = 0b0010, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mirrorRADEC')
        self.motor_c = axis.axis(SPI = self.pymlab, SPI_CS = 0b0100, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mirrorTIME')

        #self.motor_a.Reset(KVAL_RUN = 0x29, KVAL_ACC = 0x49, KVAL_DEC = 0x49, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #leva prava
        #self.motor_b.Reset(KVAL_RUN = 0x19, KVAL_ACC = 0x49, KVAL_DEC = 0x49, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #nahoru dolu
        #self.motor_c.Reset(KVAL_RUN = 0x29, KVAL_ACC = 0x39, KVAL_DEC = 0x39, FS_SPD = 0xFFFF, STEP_SEL = 0b011) #time motor

        self.motor_a.Reset(KVAL_RUN = 0x19, KVAL_ACC = 0x49, KVAL_DEC = 0x49, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #leva prava
        self.motor_b.Reset(KVAL_RUN = 0x09, KVAL_ACC = 0x19, KVAL_DEC = 0x19, FS_SPD = 0xFFFF, STEP_SEL = 0b001) #nahoru dolu
        self.motor_c.Reset(KVAL_RUN = 0x29, KVAL_ACC = 0x39, KVAL_DEC = 0x39, FS_SPD = 0xFFFF, STEP_SEL = 0b011) #time motor

        #nahoru dolu

        '''
        pocet kroku je cca 16600 s nastavenim STEP_SEL = 0b001
        '''

        #self.motor_c.setConfig(EXT_CLK = 0b1, OSC_SEL = 0b110) # Ext clock source: 24 MHz(Crystal/resonator driver disabled)

        self.motor_a.Float()
        self.motor_b.Float()
        self.motor_c.Float()
        self.direction = 1

        self.motor_a.MaxSpeed(200)
        #self.motor_a.MinSpeed(20)

        self.motor_b.MaxSpeed(200)  #leva prava
        #self.motor_b.MinSpeed(20)

        self.motor_c.MaxSpeed(0x33ff)


        last_data = [None]

        rate = rospy.Rate(10)
        self.pub_beep.publish('welcome')
        self.pub_lcd.publish("Welcome...    OK\nAROM    MLAB.cz")
        
        while not rospy.is_shutdown():
            try:
                if len(self.btn_data) > 0:
                    print self.btn_data[0], len(self.btn_data)
                    lastBtn = self.btn_data[0]
                    last_data = lastBtn.split(" ")
                    self.btn_data.pop(0)

                    print "incomming:", last_data

                    if last_data[0] == 'KEY_LEFT':
                        self.speedA -= 20
                        self.motor_a.Run(0, self.speedA)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("Left \n %s" %(self.speedA))

                    elif last_data[0] == 'KEY_RIGHT':
                        self.speedA += 20
                        self.motor_a.Run(0, self.speedA)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("Right \n %s" %(self.speedA))

                    elif last_data[0] == 'KEY_UP':
                        self.speedB -= 10
                        self.motor_b.Run(0, self.speedB)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("Up \n %s" %(self.speedB))

                    elif last_data[0] == 'KEY_DOWN':
                        self.speedB += 10
                        self.motor_b.Run(0, self.speedB)
                        #time.sleep(0.25)
                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("pause")
                        self.pub_lcd.publish("Down \n %s" %(self.speedB))


                    elif last_data[0] == 'KEY_VOLUMEUP':
                        self.flag['assisted'] = not self.flag['assisted']
                        #self.flag['tracking']= False
                        #self.pub_imagecommand.publish("pause")
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.motor_c.Run(0, self.trackingSpd*self.direction)
                        #time.sleep(0.25)

                        if self.flag['assisted']:
                            self.pub_lcd.publish("Asist. navadeni \n     Zapnuto")
                        else:
                            self.pub_lcd.publish("Asist. navadeni \n     Vypnuto")


                    elif last_data[0] == 'KEY_VOLUMEDOWN':

                        self.pub_imagecommand.publish("hold")

                        #self.direction *= -1
                        #if self.direction > 0:
                        #    self.pub_lcd.publish("Zmena smeru \n Smer A %s" %(self.trackingSpd*self.direction))
                        #else:
                        #    self.pub_lcd.publish("Zmena smeru \n Smer B %s" %(self.trackingSpd*self.direction))

                        #self.motor_c.Run(0, self.trackingSpd*self.direction)


                    elif last_data[0] == 'KEY_OK':
                        self.trackingSpd = int(rospy.get_param("/coelostat/speeds/tracking", 40))
                        self.flag['tracking']= True
                        print self.sunpos
                        #if self.sunpos:        #drzet tuto polohu slunce
                        #    self.pub_imagetarget.publish(self.sunpos)
                        self.speedA = 0
                        self.speedB = 0
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.motor_c.Run(0, self.trackingSpd*self.direction)
                        #self.pub_imagecommand.publish("start")
                        self.pub_lcd.publish("Start tracking \n Asist: %s" %(repr(self.flag['assisted'])))

                    elif last_data[0] == 'KEY_MUTE': # MUTE button - vse zastavi (vcetne hodinoveho stroje)
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.motor_c.Float()
                        self.speedA = 0
                        self.speedB = 0

                        self.flag['tracking']= False
                        self.pub_imagecommand.publish("stop")
                        self.pub_lcd.publish("STOP")

                        #self.speedA = 0
                        #self.speedB = 0
                        #self.speedC = 0


                        #self.motor_a.Reset(KVAL_RUN = 0x75, KVAL_ACC = 0xFF, KVAL_DEC = 0xFF, FS_SPD = 0xFFFFFF, init=False)
                        #self.motor_b.Reset(KVAL_RUN = 0x75, KVAL_ACC = 0xFF, KVAL_DEC = 0xFF, FS_SPD = 0xFFFFFF, init=False)
                        #self.motor_c.Reset(KVAL_RUN = 0x75, KVAL_ACC = 0xFF, KVAL_DEC = 0xFF, FS_SPD = 0xFFFFFF, init=False)

                        #self.motor_c.setConfig(EXT_CLK = 0b1, OSC_SEL = 0b110) # Ext clock source: 24 MHz(Crystal/resonator driver disabled)


                    elif last_data[0] == 'KEY_HOME': # HOME button - navrati coelostat do polohy, kde bude 'prenocovavat'
                        #self.pub_imagecommand.publish("recenter")
                        self.pub_imagecommand.publish("calibrate")


                    elif last_data[0] == 'KEY_BACK': # BACK - vyresetuje nastavení, vycentruje obraz na střed


                        self.calibration = True
                        self.trackingSpdDefault = int(rospy.get_param("/coelostat/speeds/tracking", 100))
                        self.trackingSpd = self.trackingSpdDefault*self.direction
                        self.bump = False
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.motor_c.Float()

                        print "zacatek kalibrace 1"
                        self.pub_lcd.publish("Kalibrace polohy\n   1 z 3")
                        self.motor_b.GoTo(-18000, wait=False)
                        time.sleep(1)
                        self.motor_a.GoTo(-40000, wait=False)

                        while self.motor_a.IsBusy() or self.motor_b.IsBusy():
                            time.sleep(0.3)

                        print "kalibrace 2"
                        self.pub_lcd.publish("Kalibrace polohy\n   1 z 2")

                        print self.motor_b.getPosition()
                        time.sleep(0.5)
                        self.motor_b.ResetPos()
                        self.motor_a.ResetPos()

                        print "kalibrace 3"
                        self.pub_lcd.publish("Kalibrace polohy\n   1 z 3")

                        self.motor_b.GoTo(16600/2, wait=False) #16600/4
                        time.sleep(1)
                        self.motor_a.GoTo(16000, wait=False)

                        while self.motor_a.IsBusy() or self.motor_b.IsBusy():
                            time.sleep(0.3)

                        print "kalibrace 4"

                        print "back"
                        print "kalibrace dokoncena"
                        self.pub_lcd.publish("Kalibrace polohy\nDokonceno")
                        self.calibration = False


                    elif last_data[0] == 'KEY_NEXT': # + - None
                        pass

                    elif last_data[0] == 'KEY_POWER':
                        try:
                            self.motor_a.Float()
                            self.motor_b.Float()
                            self.motor_c.Float()
                        except Exception as e:
                            print e

                        self.pub_imagecommand.publish("poweroff")
                        self.pub_lcd.publish("Vypinam se ... \n AROM    MLAB.cz")
                        time.sleep(1)
                        #os.system("poweroff")
                        os.system("shutdown now");

                        #pass
                        

                else:
                    if last_data[0] == 'KEY_OK' and self.flag['tracking'] == True and self.flag['assisted'] == True and self.bump == False:
                        try:
                            print "tracking",

                            spdA = self.sunerr.x*0.5



                            if spdA > 100:
                                spdA = 100
                            elif spdA < -100:
                                spdA = -100

                            if spdB > 100:
                                spdB = 100
                            elif spdB < -100:
                                spdB = -100


                            print spdA, spdB

                            if abs(spdAold - spdA) > 5:
                                self.motor_a.Run(0, int(spdA))
                                spdAold = spdA
                            if abs(spdBold - spdB) > 5:
                                self.motor_b.Run(0, int(spdB))
                                spdBold = spdB
                        except Exception as e:
                            pass
                            #print 'err3>', e


                    #self.pymlab(device="gpio_mount", method="set_ports", parameters=str(dict(port0 = self.port0, port1= self.port1)))
                
            except Exception, e:
                print "err1>", e
            rate.sleep()


        self.motor_a.Float()
        self.motor_b.Float()
        self.motor_c.Float()

    def get_status(self, timer):
        try:
            
            #print "motor A: %i, motor B: %i " %(self.motor_a.getPosition(), self.motor_b.getPosition()) 

            if not self.calibration:
                
                self.motor_a_status = self.motor_a.GetStatus()
                self.motor_b_status = self.motor_b.GetStatus()
                self.motor_c_status = self.motor_c.GetStatus()

                #print self.motor_a_status, self.motor_b_status, self.motor_c_status

                self.pub_motor_a.publish(json.dumps(self.motor_a_status, ensure_ascii=False))
                self.pub_motor_b.publish(json.dumps(self.motor_b_status, ensure_ascii=False))
                self.pub_motor_c.publish(json.dumps(self.motor_c_status, ensure_ascii=False))

                #print self.motor_a_status['SW_F'], self.motor_b_status['SW_F'], self.motor_c_status['SW_F']
                if self.motor_a_status['SW_F'] | self.motor_b_status['SW_F'] | self.motor_c_status['SW_F']:
                    self.speedA = 0
                    self.speedB = 0

                    self.bump = True
                    print "Err - SWITCH"
                    self.pub_beep.publish('horn')
                    self.pub_lcd.publish("POZOR!   A B C\n doraz   %s %s %s" %(int(self.motor_a_status['SW_F']), int(self.motor_b_status['SW_F']), int(self.motor_c_status['SW_F'])))

                    self.motor_a.Float()
                    #self.motor_b.Float()
                    self.motor_c.Float()


        except Exception as e:
            print 'err2> ', e
            print self.motor_a_status
            print self.motor_b_status
            print self.motor_c_status
            self.pub_beep.publish('horn')


    def callback_btn(self, recive):
        print recive
        self.btn_data.append(recive.data)
        #print recive, btn_data

    def callback_sunerr(self, recive):
        #print recive
        self.sunerr = recive

        #self.btn_data.append(recive.data)
        #print recive, btn_data

    def callback_sunpos(self, recive):
        #print recive
        self.sunpos = recive


if __name__ == '__main__':
    while not rosnode.rosnode_ping("/pymlab", 1):
        time.sleep(1)
    print "pymlab nalezen"
    time.sleep(10)
    m = SolarLab()
